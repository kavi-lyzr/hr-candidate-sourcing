---
description:
globs:
alwaysApply: true
---

# Lyzr AI Frontend Design & Vibe Coding Guide

This document outlines the design system, principles, and component usage guidelines for building premium, intuitive, and polished user interfaces for Lyzr AI. This guide should serve as the primary instruction set for developing frontend features. The core philosophy is **intentional design**: every choice, from component selection to spacing, must be deliberate and user-centric.

Our tech stack is **Next.js**, **TypeScript**, **Tailwind CSS v4**, and **shadcn/ui**. All file paths should reference the project structure, using the `@` alias defined in `components.json`.

## Core Design Principles

Before writing any code, adhere to these foundational principles:

1.  **User-Centric & Intuitive**: The primary goal is to minimize cognitive load. Interfaces should be self-explanatory. User flows must be optimized for the fewest clicks and least amount of thought. Always ask: "What is the user trying to achieve, and how can we make it effortless?"
2.  **Clarity & Consistency**: A consistent visual language builds trust and makes the application predictable. Spacing, typography, and component behavior must be uniform across the entire platform. Refer to the specific guidelines below for typography and spacing scales.
3.  **Mobile-First Responsiveness**: All designs must begin with the mobile viewport and scale up gracefully. Use Tailwind's responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`) to adapt layouts. Functionality should never be compromised on smaller screens; instead, adapt components to fit the context (e.g., using a `Select` instead of `Tabs`).
4.  **Premium Aesthetics**: We are not just building a functional tool; we are crafting a premium experience. This is achieved through meticulous attention to detail: ample whitespace, a balanced typographic hierarchy, subtle animations, and a polished finish on every component.

-----

## Layout & Structure

Structure is the backbone of the UI. Use `flexbox` for most layouts and `grid` for more complex, two-dimensional arrangements.

  * **Overall Page Layout**: A standard page should consist of a primary sidebar (`@/components/app-sidebar.tsx`) and a main content area. The main content area should have consistent horizontal padding to ensure content doesn't touch the screen edges.
    ```css
    /* Example structure */
    <div class="flex h-screen">
      <AppSidebar />
      <main class="flex-1 overflow-y-auto p-4 md:p-6 lg:p-8">
        {/* Page content goes here */}
      </main>
    </div>
    ```
  * **Flexbox**: Use `flex` for most component compositions.
      * Use `flex flex-col` for vertically stacked items like form fields, card content, or sections.
      * Use `flex flex-row` for horizontally aligned items like buttons in a form footer, items in a header, or icon-label pairs.
      * Use `gap-*` utilities extensively for consistent spacing between elements within a flex container. Avoid using margins for this purpose.
  * **Grid**: Use `grid` when you need to align items in a two-dimensional structure, such as a dashboard with multiple cards of varying sizes or a complex settings page.
  * **Sidebar Navigation**: The order of items in `@/components/app-sidebar.tsx` must be logical and prioritized based on user workflow. The most frequent and critical tasks (e.g., "Dashboard," "Chatbots") should be at the top. Secondary or settings-related items ("API Keys," "Settings," "Logout") should be grouped and placed at the bottom.

-----

## Spacing & Typography

Consistency here is non-negotiable. These are not suggestions but rules. The base font is **Switzer**, as defined in `@/app/globals.css`.

### Spacing

We use Tailwind's default spacing scale (multiples of 0.25rem).

| Use Case | Tailwind Class | Notes |
| :--- | :--- | :--- |
| **Page Padding** | `p-4 md:p-6 lg:p-8` | Creates breathing room around the main content. |
| **Card Padding** | `p-6` | Consistent internal padding for all `Card` components. |
| **Inter-Element (Vertical)** | `gap-4` or `gap-6` | Use in `flex-col` containers for spacing between form fields, text blocks, etc. |
| **Inter-Element (Horizontal)**| `gap-2` or `gap-4` | Use in `flex-row` containers for icons and text, or adjacent buttons. |
| **Section Spacing** | `py-8` or `py-12` | Larger vertical spacing to separate distinct sections on a page. |

### Typography

Establish a clear visual hierarchy using this scale.

| Use Case | Tailwind Class | Font Weight | Notes |
| :--- | :--- | :--- | :--- |
| **Page Title** | `text-3xl` or `text-4xl` | `font-bold` | Use once per page for the main `H1`. |
| **Section Heading** | `text-xl` or `text-2xl` | `font-semibold` | For major sections within a page (`H2`). |
| **Card Title** | `text-lg` | `font-medium` | For titles inside `@/components/ui/card.tsx`. |
| **Body Text** | `text-base` | `font-normal` | The default for all paragraphs and general text. |
| **Subtle/Muted Text** | `text-sm text-muted-foreground`| `font-normal` | For helper text, captions, or secondary information. |
| **Button/Label Text** | `text-sm` | `font-medium` | For all buttons and form labels. |

-----

## Component Patterns & Best Practices

This section details how to combine components to solve common UI problems.

### Forms & Inputs

  * **Structure**: Always wrap forms or groups of related inputs in a `@/components/ui/card.tsx` for clear visual grouping.
  * **Layout**: Use `flex flex-col gap-4` for the main form structure. Each form element should consist of a `@/components/ui/label.tsx`, the `@/components/ui/input.tsx` (or `select`, `textarea`, etc.), and optionally, a muted helper text below the input.
  * **Actions**: Form action buttons (`@/components/ui/button.tsx`) should be placed at the bottom, typically right-aligned. The primary action (e.g., "Save") should be solid, while secondary actions (e.g., "Cancel") should have the `variant="outline"` or `variant="ghost"`.

### Responsive Navigation

  * **Problem**: A navigation bar with many items (e.g., 5+ tabs) looks cluttered on mobile.
  * **Solution**:
    1.  On **desktop and tablet** (`md:` breakpoint and up), use the `@/components/ui/tabs.tsx` component for clear, one-click access.
    2.  On **mobile** (screens smaller than `md:`), hide the `Tabs` component and show a `@/components/ui/select.tsx` component instead. Populate the `Select` with the same navigation items. This provides a familiar, space-efficient, and native-feeling mobile experience.

### Data Display

  * **Tables**: For dense, structured data (e.g., logs, user lists, billing history), use the `@/components/ui/table.tsx`. Ensure it's wrapped in a responsive container to allow horizontal scrolling on small screens if needed.
  * **Cards**: For less dense, more visual information (e.g., a list of projects, chatbot previews), use a `grid` of `@/components/ui/card.tsx` components. This allows for more flexible and visually engaging layouts.

### Icons

  * Use icons from `lucide-react` as specified in `components.json`.
  * Icons inside buttons or next to labels should be small (`size={16}` or `className="h-4 w-4"`).
  * Maintain a `gap-2` between an icon and its corresponding text.

-----

## Available Component Library

The following components are available for use. Prioritize using these existing components over creating new ones to maintain consistency.

### UI Components (from shadcn)

  * `@/components/ui/accordion.tsx`
  * `@/components/ui/alert-dialog.tsx`
  * `@/components/ui/alert.tsx`
  * `@/components/ui/aspect-ratio.tsx`
  * `@/components/ui/avatar.tsx`
  * `@/components/ui/badge.tsx`
  * `@/components/ui/breadcrumb.tsx`
  * `@/components/ui/button.tsx`
  * `@/components/ui/calendar.tsx`
  * `@/components/ui/card.tsx`
  * `@/components/ui/carousel.tsx`
  * `@/components/ui/chart.tsx`
  * `@/components/ui/checkbox.tsx`
  * `@/components/ui/collapsible.tsx`
  * `@/components/ui/command.tsx`
  * `@/components/ui/context-menu.tsx`
  * `@/components/ui/dialog.tsx`
  * `@/components/ui/drawer.tsx`
  * `@/components/ui/dropdown-menu.tsx`
  * `@/components/ui/form.tsx`
  * `@/components/ui/hover-card.tsx`
  * `@/components/ui/input-otp.tsx`
  * `@/components/ui/input.tsx`
  * `@/components/ui/label.tsx`
  * `@/components/ui/menubar.tsx`
  * `@/components/ui/navigation-menu.tsx`
  * `@/components/ui/pagination.tsx`
  * `@/components/ui/popover.tsx`
  * `@/components/ui/progress.tsx`
  * `@/components/ui/radio-group.tsx`
  * `@/components/ui/resizable.tsx`
  * `@/components/ui/scroll-area.tsx`
  * `@/components/ui/select.tsx`
  * `@/components/ui/separator.tsx`
  * `@/components/ui/sheet.tsx`
  * `@/components/ui/skeleton.tsx`
  * `@/components/ui/slider.tsx`
  * `@/components/ui/sonner.tsx`
  * `@/components/ui/switch.tsx`
  * `@/components/ui/table.tsx`
  * `@/components/ui/tabs.tsx`
  * `@/components/ui/textarea.tsx`
  * `@/components/ui/toggle-group.tsx`
  * `@/components/ui/toggle.tsx`
  * `@/components/ui/tooltip.tsx`

### Custom Application Components

  * `@/components/app-sidebar.tsx`
  * `@/components/chart-area-interactive.tsx`
  * `@/components/data-table.tsx`
  * `@/components/nav-documents.tsx`
  * `@/components/nav-main.tsx`
  * `@/components/nav-secondary.tsx`
  * `@/components/nav-user.tsx`
  * `@/components/section-cards.tsx`
  * `@/components/site-header.tsx`
